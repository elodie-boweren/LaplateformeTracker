package org.example.laplateforme.view;

import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;

/**
 * Vue du menu principal de l'application La Plateforme Tracker
 * Version simplifi√©e sans base de donn√©es
 */
public class MainMenuView extends VBox {

    public MainMenuView() {
        initializeUI();
        setupEventHandlers();
    }

    /**
     * Initialise l'interface utilisateur du menu principal
     */
    private void initializeUI() {
        // Configuration du conteneur principal
        setPadding(new Insets(30));
        setSpacing(20);
        setAlignment(Pos.CENTER);
        setStyle("-fx-background-color: #f8f9fa;");

        // Titre principal
        Label titleLabel = new Label("La Plateforme_ Tracker");
        titleLabel.setFont(Font.font("Arial", FontWeight.BOLD, 28));
        titleLabel.setStyle("-fx-text-fill: #2c3e50;");

        Label subtitleLabel = new Label("Syst√®me de Gestion des √âtudiants");
        subtitleLabel.setFont(Font.font("Arial", FontWeight.NORMAL, 16));
        subtitleLabel.setStyle("-fx-text-fill: #7f8c8d;");

        // Section des fonctionnalit√©s principales
        Label mainFeaturesLabel = new Label("Fonctionnalit√©s Principales");
        mainFeaturesLabel.setFont(Font.font("Arial", FontWeight.BOLD, 18));
        mainFeaturesLabel.setStyle("-fx-text-fill: #34495e;");

        // Boutons pour les fonctionnalit√©s principales
        Button addBtn = createStyledButton("‚ûï Ajouter un √©tudiant", "#27ae60");
        Button editBtn = createStyledButton("‚úèÔ∏è Modifier un √©tudiant", "#f39c12");
        Button deleteBtn = createStyledButton("üóëÔ∏è Supprimer un √©tudiant", "#e74c3c");
        Button searchBtn = createStyledButton("üîç Rechercher un √©tudiant", "#3498db");
        Button listBtn = createStyledButton("üìã Afficher tous les √©tudiants", "#9b59b6");

        // Organiser les boutons principaux en grille
        GridPane mainButtonsGrid = new GridPane();
        mainButtonsGrid.setHgap(15);
        mainButtonsGrid.setVgap(15);
        mainButtonsGrid.setAlignment(Pos.CENTER);

        mainButtonsGrid.add(addBtn, 0, 0);
        mainButtonsGrid.add(editBtn, 1, 0);
        mainButtonsGrid.add(deleteBtn, 0, 1);
        mainButtonsGrid.add(searchBtn, 1, 1);
        mainButtonsGrid.add(listBtn, 0, 2, 2, 1); // S'√©tend sur 2 colonnes

        // Section des fonctionnalit√©s avanc√©es
        Label advancedFeaturesLabel = new Label("Fonctionnalit√©s Avanc√©es");
        advancedFeaturesLabel.setFont(Font.font("Arial", FontWeight.BOLD, 18));
        advancedFeaturesLabel.setStyle("-fx-text-fill: #34495e;");

        // Boutons pour les fonctionnalit√©s avanc√©es
        Button sortBtn = createStyledButton("üìä Tri des √©tudiants", "#16a085");
        Button advancedSearchBtn = createStyledButton("üîé Recherche avanc√©e", "#2980b9");
        Button statsBtn = createStyledButton("üìà Statistiques", "#8e44ad");
        Button importExportBtn = createStyledButton("üíæ Import/Export", "#d35400");

        // Organiser les boutons avanc√©s en ligne
        HBox advancedButtonsBox = new HBox(15);
        advancedButtonsBox.setAlignment(Pos.CENTER);
        advancedButtonsBox.getChildren().addAll(sortBtn, advancedSearchBtn, statsBtn, importExportBtn);

        // Section utilitaires
        Label utilityFeaturesLabel = new Label("Utilitaires");
        utilityFeaturesLabel.setFont(Font.font("Arial", FontWeight.BOLD, 18));
        utilityFeaturesLabel.setStyle("-fx-text-fill: #34495e;");

        // Boutons utilitaires
        Button aboutBtn = createStyledButton("‚ÑπÔ∏è √Ä propos", "#7f8c8d");
        Button helpBtn = createStyledButton("‚ùì Aide", "#95a5a6");
        Button exitBtn = createStyledButton("üö™ Quitter", "#c0392b");

        HBox utilityButtonsBox = new HBox(15);
        utilityButtonsBox.setAlignment(Pos.CENTER);
        utilityButtonsBox.getChildren().addAll(aboutBtn, helpBtn, exitBtn);

        // Ajouter tous les √©l√©ments au conteneur principal
        getChildren().addAll(
                titleLabel,
                subtitleLabel,
                new Label(), // Espacement
                mainFeaturesLabel,
                mainButtonsGrid,
                new Label(), // Espacement
                advancedFeaturesLabel,
                advancedButtonsBox,
                new Label(), // Espacement
                utilityFeaturesLabel,
                utilityButtonsBox
        );
    }

    /**
     * Cr√©e un bouton avec un style personnalis√©
     */
    private Button createStyledButton(String text, String color) {
        Button button = new Button(text);
        button.setPrefWidth(200);
        button.setPrefHeight(50);
        button.setFont(Font.font("Arial", FontWeight.NORMAL, 14));
        button.setStyle(
                "-fx-background-color: " + color + ";" +
                        "-fx-text-fill: white;" +
                        "-fx-background-radius: 8;" +
                        "-fx-border-radius: 8;" +
                        "-fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.2), 5, 0, 0, 2);"
        );

        // Effet hover
        button.setOnMouseEntered(e -> button.setStyle(
                "-fx-background-color: derive(" + color + ", -10%);" +
                        "-fx-text-fill: white;" +
                        "-fx-background-radius: 8;" +
                        "-fx-border-radius: 8;" +
                        "-fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.3), 8, 0, 0, 3);" +
                        "-fx-scale-x: 1.05;" +
                        "-fx-scale-y: 1.05;"
        ));

        button.setOnMouseExited(e -> button.setStyle(
                "-fx-background-color: " + color + ";" +
                        "-fx-text-fill: white;" +
                        "-fx-background-radius: 8;" +
                        "-fx-border-radius: 8;" +
                        "-fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.2), 5, 0, 0, 2);" +
                        "-fx-scale-x: 1.0;" +
                        "-fx-scale-y: 1.0;"
        ));

        return button;
    }

    /**
     * Configure les gestionnaires d'√©v√©nements pour les boutons
     */
    private void setupEventHandlers() {
        // Parcourir tous les boutons et leur assigner des actions
        assignButtonActions();
    }

    private void assignButtonActions() {
        getChildren().forEach(node -> {
            if (node instanceof GridPane) {
                GridPane grid = (GridPane) node;
                grid.getChildren().forEach(child -> {
                    if (child instanceof Button) {
                        Button btn = (Button) child;
                        setButtonAction(btn);
                    }
                });
            } else if (node instanceof HBox) {
                HBox hbox = (HBox) node;
                hbox.getChildren().forEach(child -> {
                    if (child instanceof Button) {
                        Button btn = (Button) child;
                        setButtonAction(btn);
                    }
                });
            }
        });
    }

    private void setButtonAction(Button btn) {
        String buttonText = btn.getText();

        btn.setOnAction(e -> {
            if (buttonText.contains("Quitter")) {
                showExitConfirmation();
            } else if (buttonText.contains("√Ä propos")) {
                showAboutDialog();
            } else if (buttonText.contains("Aide")) {
                showHelpDialog();
            } else {
                showFeatureDialog(buttonText);
            }
        });
    }

    /**
     * Affiche une bo√Æte de dialogue pour les fonctionnalit√©s
     */
    private void showFeatureDialog(String featureName) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Fonctionnalit√©");
        alert.setHeaderText(featureName);
        alert.setContentText("Cette fonctionnalit√© sera impl√©ment√©e prochainement !\n\n" +
                "Fonctionnalit√©s √† d√©velopper :\n" +
                "‚Ä¢ Connexion √† la base de donn√©es PostgreSQL\n" +
                "‚Ä¢ Interface de gestion des √©tudiants\n" +
                "‚Ä¢ Syst√®me de recherche et de tri\n" +
                "‚Ä¢ Import/Export de donn√©es\n" +
                "‚Ä¢ Statistiques et rapports");
        alert.showAndWait();
    }

    /**
     * Affiche la bo√Æte de dialogue "√Ä propos"
     */
    private void showAboutDialog() {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("√Ä propos");
        alert.setHeaderText("La Plateforme_ Tracker");
        alert.setContentText("Syst√®me de Gestion des √âtudiants\n\n" +
                "Version : 1.0-SNAPSHOT\n" +
                "D√©velopp√© avec JavaFX\n" +
                "Base de donn√©es : PostgreSQL\n\n" +
                "Fonctionnalit√©s principales :\n" +
                "‚Ä¢ Gestion compl√®te des √©tudiants\n" +
                "‚Ä¢ Recherche et tri avanc√©s\n" +
                "‚Ä¢ Import/Export de donn√©es\n" +
                "‚Ä¢ Statistiques d√©taill√©es\n" +
                "‚Ä¢ Interface utilisateur moderne");
        alert.showAndWait();
    }

    /**
     * Affiche la bo√Æte de dialogue d'aide
     */
    private void showHelpDialog() {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Aide");
        alert.setHeaderText("Comment utiliser La Plateforme_ Tracker");
        alert.setContentText("Guide d'utilisation :\n\n" +
                "1. Fonctionnalit√©s principales :\n" +
                "   ‚Ä¢ Ajouter : Cr√©er un nouvel √©tudiant\n" +
                "   ‚Ä¢ Modifier : √âditer les informations\n" +
                "   ‚Ä¢ Supprimer : Retirer un √©tudiant\n" +
                "   ‚Ä¢ Rechercher : Trouver un √©tudiant\n" +
                "   ‚Ä¢ Afficher : Voir tous les √©tudiants\n\n" +
                "2. Fonctionnalit√©s avanc√©es :\n" +
                "   ‚Ä¢ Tri par nom, √¢ge, notes\n" +
                "   ‚Ä¢ Recherche multicrit√®res\n" +
                "   ‚Ä¢ Statistiques de classe\n" +
                "   ‚Ä¢ Import/Export CSV, JSON\n\n" +
                "Note : Interface en d√©veloppement");
        alert.showAndWait();
    }

    /**
     * Affiche la confirmation de sortie
     */
    private void showExitConfirmation() {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Quitter l'application");
        alert.setHeaderText("Voulez-vous vraiment quitter ?");
        alert.setContentText("Toutes les donn√©es non sauvegard√©es seront perdues.");

        alert.showAndWait().ifPresent(response -> {
            if (response.getButtonData().isDefaultButton()) {
                System.out.println("Fermeture de l'application...");
                Platform.exit();
            }
        });
    }
}